{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"tagolym-ml","text":"<p>Tag high school math olympiad problems with 10 predefined topics:</p> Big Topics Algebra Subtopics Geometry Subtopics Number Theory Subtopics algebra inequality circle modular arithmetic geometry function trigonometry number theory polynomial combinatorics <p>Input text:</p> <p>Find all functions \\(f:(0,\\infty)\\rightarrow (0,\\infty)\\) such that for any \\(x,y\\in (0,\\infty)\\),  $$ xf(x^2)f(f(y)) + f(yf(x)) = f(xy) \\left(f(f(x^2)) + f(f(y^2))\\right). $$</p> <p>Predicted tags:</p> <p>[\"algebra\", \"function\"]</p>"},{"location":"#virtual-environment","title":"Virtual Environment","text":"<pre><code>$ git clone https://github.com/dwiuzila/tagolym-ml.git\n$ cd tagolym-ml\n$ git checkout code_migration\n$ python3 -m venv venv\n$ source venv/bin/activate\n$ python3 -m pip install --upgrade pip\n$ python3 -m pip install -e .\n</code></pre>"},{"location":"#directory","title":"Directory","text":"<pre><code>config/\n\u251c\u2500\u2500 args_opt.json         - optimized parameters\n\u251c\u2500\u2500 args.json             - preprocessing/training parameters\n\u251c\u2500\u2500 config.py             - configuration setup\n\u251c\u2500\u2500 run_id.txt            - run id of the last model training\n\u251c\u2500\u2500 test_metrics.json     - model performance on test split\n\u251c\u2500\u2500 train_metrics.json    - model performance on train split\n\u2514\u2500\u2500 val_metrics.json      - model performance on validation split\n\ncredentials/\n\u2514\u2500\u2500 bigquery-key.json     - keys and passwords\n\ndata/\n\u2514\u2500\u2500 labeled_data.json     - data used in the project\n\nstores/model/             - MLflow experiments\n\ntagolym/\n\u251c\u2500\u2500 data.py               - data processing components\n\u251c\u2500\u2500 evaluate.py           - evaluation components\n\u251c\u2500\u2500 main.py               - training/optimization pipelines\n\u251c\u2500\u2500 predict.py            - inference components\n\u251c\u2500\u2500 train.py              - training components\n\u2514\u2500\u2500 utils.py              - supplementary utilities\n\ntagolym.egg-info/         - project metadata\n\nvenv/                     - virtual environment\n\n.gitignore                - files/folders that git will ignore\n\nLICENSE                   - project license\n\nREADME.md                 - longform description of the project\n\nrequirements.txt          - package dependencies\n\nsetup.py                  - code packaging\n</code></pre>"},{"location":"#workflow","title":"Workflow","text":"<p>You wouldn't be able to execute the <code># query data</code> part in the code snippet below due to data access restrictions. For that, you'd need my credential, which unfortunately is not to be shared. But worry not, I'll provide samples for you to work with. What you need to do is simply download the samples <code>labeled_data.json</code> and save the file in a folder named <code>data</code> in the working directory.</p> <pre><code>from pathlib import Path\nfrom config import config\nfrom tagolym import main\n\n# query data\nkey_path = \"credentials/bigquery-key.json\"\nmain.elt_data(key_path)\n\n# optimize model\nargs_fp = Path(config.CONFIG_DIR, \"args.json\")\nmain.optimize(args_fp, study_name=\"optimization\", num_trials=10)\n\n# train model\nargs_fp = Path(config.CONFIG_DIR, \"args_opt.json\")\nmain.train_model(args_fp, experiment_name=\"baselines\", run_name=\"sgd\")\n\n# inference\ntexts = [\n    \"Let $c,d \\geq 2$ be naturals. Let $\\{a_n\\}$ be the sequence satisfying $a_1 = c, a_{n+1} = a_n^d + c$ for $n = 1,2,\\cdots$.Prove that for any $n \\geq 2$, there exists a prime number $p$ such that $p|a_n$ and $p \\not | a_i$ for $i = 1,2,\\cdots n-1$.\",\n    \"Let $ABC$ be a triangle with circumcircle $\\Gamma$ and incenter $I$ and let $M$ be the midpoint of $\\overline{BC}$. The points $D$, $E$, $F$ are selected on sides $\\overline{BC}$, $\\overline{CA}$, $\\overline{AB}$ such that $\\overline{ID} \\perp \\overline{BC}$, $\\overline{IE}\\perp \\overline{AI}$, and $\\overline{IF}\\perp \\overline{AI}$. Suppose that the circumcircle of $\\triangle AEF$ intersects $\\Gamma$ at a point $X$ other than $A$. Prove that lines $XD$ and $AM$ meet on $\\Gamma$.\",\n    \"Find all functions $f:(0,\\infty)\\rightarrow (0,\\infty)$ such that for any $x,y\\in (0,\\infty)$, $$xf(x^2)f(f(y)) + f(yf(x)) = f(xy) \\left(f(f(x^2)) + f(f(y^2))\\right).$$\",\n    \"Let $n$ be an even positive integer. We say that two different cells of a $n \\times n$ board are [b]neighboring[/b] if they have a common side. Find the minimal number of cells on the $n \\times n$ board that must be marked so that any cell (marked or not marked) has a marked neighboring cell.\"\n]\nmain.predict_tag(texts=texts)\n</code></pre>"},{"location":"license/","title":"License","text":"<pre><code>                    GNU AFFERO GENERAL PUBLIC LICENSE\n                       Version 3, 19 November 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. &lt;https://fsf.org/&gt;\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU Affero General Public License is a free, copyleft license for\nsoftware and other kinds of works, specifically designed to ensure\ncooperation with the community in the case of network server software.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nour General Public Licenses are intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  Developers that use our General Public Licenses protect your rights\nwith two steps: (1) assert copyright on the software, and (2) offer\nyou this License which gives you legal permission to copy, distribute\nand/or modify the software.\n\n  A secondary benefit of defending all users' freedom is that\nimprovements made in alternate versions of the program, if they\nreceive widespread use, become available for other developers to\nincorporate.  Many developers of free software are heartened and\nencouraged by the resulting cooperation.  However, in the case of\nsoftware used on network servers, this result may fail to come about.\nThe GNU General Public License permits making a modified version and\nletting the public access it on a server without ever releasing its\nsource code to the public.\n\n  The GNU Affero General Public License is designed specifically to\nensure that, in such cases, the modified source code becomes available\nto the community.  It requires the operator of a network server to\nprovide the source code of the modified version running there to the\nusers of that server.  Therefore, public use of a modified version, on\na publicly accessible server, gives the public access to the source\ncode of the modified version.\n\n  An older license, called the Affero General Public License and\npublished by Affero, was designed to accomplish similar goals.  This is\na different license, not a version of the Affero GPL, but Affero has\nreleased a new version of the Affero GPL which permits relicensing under\nthis license.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU Affero General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Remote Network Interaction; Use with the GNU General Public License.\n\n  Notwithstanding any other provision of this License, if you modify the\nProgram, your modified version must prominently offer all users\ninteracting with it remotely through a computer network (if your version\nsupports such interaction) an opportunity to receive the Corresponding\nSource of your version by providing access to the Corresponding Source\nfrom a network server at no charge, through some standard or customary\nmeans of facilitating copying of software.  This Corresponding Source\nshall include the Corresponding Source for any work covered by version 3\nof the GNU General Public License that is incorporated pursuant to the\nfollowing paragraph.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the work with which it is combined will remain governed by version\n3 of the GNU General Public License.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU Affero General Public License from time to time.  Such new versions\nwill be similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU Affero General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU Affero General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU Affero General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    &lt;one line to give the program's name and a brief idea of what it does.&gt;\n    Copyright (C) &lt;year&gt;  &lt;name of author&gt;\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Affero General Public License as published\n    by the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Affero General Public License for more details.\n\n    You should have received a copy of the GNU Affero General Public License\n    along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If your software can interact with users remotely through a computer\nnetwork, you should also make sure that it provides a way for users to\nget its source.  For example, if your program is a web application, its\ninterface could display a \"Source\" link that leads users to an archive\nof the code.  There are many ways you could offer source, and different\nsolutions will be better for different programs; see section 13 for the\nspecific requirements.\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU AGPL, see\n&lt;https://www.gnu.org/licenses/&gt;.\n</code></pre>"},{"location":"reference/data/","title":"Data","text":""},{"location":"reference/data/#data","title":"data","text":"<p>All functions regarding data are written in this module, including data  split, preprocessing, and transformation.</p> Definitions Term Definition Post String explaining a math problem written in LaTeX. Token Preprocessed post. Tag User input string suggesting in what category a post is.               A post could have multiple tags. Label Preprocessed tag. Only 10 labels are defined."},{"location":"reference/data/#data.create_tag_mapping","title":"create_tag_mapping","text":"<pre><code>create_tag_mapping(tags: Series) -&gt; defaultdict[str, list]\n</code></pre> <p>Create a dictionary in which each key is a tag and each value is a  sublist of complete labels. The mapping is defined if the lowercased tag  contains an element of partial labels as its substring.</p> <p>Partial labels are defined as  <pre><code>[\"algebra\", \"geometr\", \"number theor\", \"combinator\", \"inequalit\", \n \"function\", \"polynomial\", \"circle\", \"trigonometr\", \"modul\"]\n</code></pre> and complete labels are defined as <pre><code>[\"algebra\", \"geometry\", \"number theory\", \"combinatorics\", \"inequality\", \n \"function\", \"polynomial\", \"circle\", \"trigonometry\", \"modular arithmetic\"]\n</code></pre></p> <p>For example, the tag <code>[\"combinatorial geometry\"]</code> will give a key-value  pair <code>{\"combinatorial geometry\": [\"combinatorics\", \"geometry\"]}</code>.</p> <p>Parameters:</p> <ul> <li> <code>tags</code>             (<code>Series</code>)         \u2013          <p>Collection of list of tags annotated by users.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>defaultdict[str, list]</code>         \u2013          <p>Mapping from tag to sublist of complete labels.</p> </li> </ul> Source code in <code>tagolym/data.py</code> <pre><code>def create_tag_mapping(tags: Series) -&gt; defaultdict[str, list]:\n\"\"\"Create a dictionary in which each key is a tag and each value is a \n    sublist of complete labels. The mapping is defined if the lowercased tag \n    contains an element of partial labels as its substring.\n\n    Partial labels are defined as \n    ```python\n    [\"algebra\", \"geometr\", \"number theor\", \"combinator\", \"inequalit\", \n     \"function\", \"polynomial\", \"circle\", \"trigonometr\", \"modul\"]\n    ```\n    and complete labels are defined as\n    ```python\n    [\"algebra\", \"geometry\", \"number theory\", \"combinatorics\", \"inequality\", \n     \"function\", \"polynomial\", \"circle\", \"trigonometry\", \"modular arithmetic\"]\n    ```\n\n    For example, the tag `[\"combinatorial geometry\"]` will give a key-value \n    pair `{\"combinatorial geometry\": [\"combinatorics\", \"geometry\"]}`.\n\n    Args:\n        tags (Series): Collection of list of tags annotated by users.\n\n    Returns:\n        Mapping from tag to sublist of complete labels.\n    \"\"\"\n    mappings = []\n    for plb, clb in zip(config.PARTIAL_LABELS, config.COMPLETE_LABELS):\n        similar_tags = set([t.lower() for tag in tags for t in tag if plb in t.lower()])\n        mappings.append({tag: clb for tag in similar_tags})\n\n    mapping = defaultdict(list)\n    for mpg in mappings:\n        for key, value in mpg.items():\n            mapping[key].append(value)\n\n    return mapping\n</code></pre>"},{"location":"reference/data/#data.preprocess_tag","title":"preprocess_tag","text":"<pre><code>preprocess_tag(x: list, mapping: defaultdict[str, list]) -&gt; list\n</code></pre> <p>Preprocess a list of tags, including: lowercasing, mapping to complete  labels, dropping duplicates, and sorting.</p> <p>Parameters:</p> <ul> <li> <code>x</code>             (<code>list</code>)         \u2013          <p>List of tags annotated by users.</p> </li> <li> <code>mapping</code>             (<code>defaultdict[str, list]</code>)         \u2013          <p>Mapping from tag to sublist of  complete labels.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list</code>         \u2013          <p>Preprocessed list of tags.</p> </li> </ul> Source code in <code>tagolym/data.py</code> <pre><code>def preprocess_tag(x: list, mapping: defaultdict[str, list]) -&gt; list:\n\"\"\"Preprocess a list of tags, including: lowercasing, mapping to complete \n    labels, dropping duplicates, and sorting.\n\n    Args:\n        x (list): List of tags annotated by users.\n        mapping (defaultdict[str, list]): Mapping from tag to sublist of \n            complete labels.\n\n    Returns:\n        Preprocessed list of tags.\n    \"\"\"\n    x = [tag.lower() for tag in x]       # lowercase all\n    x = map(mapping.get, x)              # map tags\n    x = filter(None, x)                  # remove None\n    x = [t for tag in x for t in tag]    # flattened tags\n    x = sorted(list(set(x)))             # drop duplicates and sort\n    return x\n</code></pre>"},{"location":"reference/data/#data.extract_features","title":"extract_features","text":"<pre><code>extract_features(equation_pattern: str, x: str) -&gt; str\n</code></pre> <p>Extract LaTeX commands inside math modes from a given text.</p> <p>For example, this render</p> <p>Find all functions \\(f:(0,\\infty)\\rightarrow (0,\\infty)\\) such that for  any \\(x,y\\in (0,\\infty)\\),  $$ xf(x^2)f(f(y)) + f(yf(x)) = f(xy) \\left(f(f(x^2)) + f(f(y^2))\\right). $$</p> <p>will become</p> <p>Find all functions  \\infty \\infty  such that for any  \\in \\infty ,  \\left</p> <p>Parameters:</p> <ul> <li> <code>equation_pattern</code>             (<code>str</code>)         \u2013          <p>Regex pattern for finding math modes.</p> </li> <li> <code>x</code>             (<code>str</code>)         \u2013          <p>Input text written in LaTeX.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>         \u2013          <p>Text with extracted LaTeX commands.</p> </li> </ul> Source code in <code>tagolym/data.py</code> <pre><code>def extract_features(equation_pattern: str, x: str) -&gt; str:\nr\"\"\"Extract LaTeX commands inside math modes from a given text.\n\n    For example, this render\n    &gt; Find all functions $f:(0,\\infty)\\rightarrow (0,\\infty)$ such that for \n    &gt; any $x,y\\in (0,\\infty)$, \n    &gt; $$\n    &gt; xf(x^2)f(f(y)) + f(yf(x)) = f(xy) \\left(f(f(x^2)) + f(f(y^2))\\right).\n    &gt; $$\n\n    will become\n    &gt; Find all functions  \\infty \\infty  such that for any  \\in \\infty ,  \\left\n\n    Args:\n        equation_pattern (str): Regex pattern for finding math modes.\n        x (str): Input text written in LaTeX.\n\n    Returns:\n        Text with extracted LaTeX commands.\n    \"\"\"\n    pattern = re.findall(equation_pattern, x)\n    ptn_len = [len(ptn) for ptn in pattern]\n    pattern = [\"\".join(ptn) for ptn in pattern]\n    syntax = [\" \".join(re.findall(r\"\\\\(?:[^a-zA-Z]|[a-zA-Z]+[*=']?)\", ptn)) for ptn in pattern]\n    split = [\"\" if s is None else s for s in re.split(equation_pattern, x)]\n\n    i = 0\n    for ptn, length, cmd in zip(pattern, ptn_len, syntax):\n        while \"\".join(split[i : i + length]) != ptn:\n            i += 1\n        split[i : i + length] = [cmd]\n\n    return \" \".join(split)\n</code></pre>"},{"location":"reference/data/#data.preprocess_post","title":"preprocess_post","text":"<pre><code>preprocess_post(x: str, nocommand: bool = False, stem: bool = False) -&gt; str\n</code></pre> <p>Deep clean a post, using extract_features as  one of the steps.</p> <p>Parameters:</p> <ul> <li> <code>x</code>             (<code>str</code>)         \u2013          <p>Post written in LaTeX.</p> </li> <li> <code>nocommand</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Whether to remove command words, i.e.  <code>[\"prove\", \"let\", \"find\", \"show\", \"given\"]</code>.</p> </li> <li> <code>stem</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Whether to apply word stemming.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>         \u2013          <p>Cleaned post.</p> </li> </ul> Source code in <code>tagolym/data.py</code> <pre><code>def preprocess_post(x: str, nocommand: bool = False, stem: bool = False) -&gt; str:\n\"\"\"Deep clean a post, using [extract_features][data.extract_features] as \n    one of the steps.\n\n    Args:\n        x (str): Post written in LaTeX.\n        nocommand (bool, optional): Whether to remove command words, i.e. \n            `[\"prove\", \"let\", \"find\", \"show\", \"given\"]`.\n        stem (bool, optional): Whether to apply word stemming.\n\n    Returns:\n        Cleaned post.\n    \"\"\"\n    x = x.lower()                                       # lowercase all\n    x = re.sub(r\"http\\S+\", \"\", x)                       # remove URLs\n    x = x.replace(\"$$$\", \"$$ $\")                        # separate triple dollars\n    x = x.replace(\"\\n\", \" \")                            # remove new lines\n    x = extract_features(config.EQUATION_PATTERN, x)    # extract latex\n    x = re.sub(config.ASYMPTOTE_PATTERN, \"\", x)         # remove asymptote\n\n    # remove stopwords\n    x = x.replace(\"\\\\\", \" \\\\\")\n    x = \" \".join(word for word in x.split() if word not in config.STOPWORDS)\n\n    x = re.sub(r\"([-;.,!?&lt;=&gt;])\", r\" \\1 \", x)            # separate filters from words\n    x = re.sub(\"[^A-Za-z0-9]+\", \" \", x)                 # remove non-alphanumeric chars\n\n    # clean command words\n    if nocommand:\n        x = \" \".join(word for word in x.split() if word not in config.COMMANDS)\n\n    # stem words\n    if stem:\n        stemmer = PorterStemmer()\n        x = \" \".join(stemmer.stem(word) for word in x.split())\n\n    # remove spaces at the beginning and end\n    x = x.strip()\n\n    return x\n</code></pre>"},{"location":"reference/data/#data.preprocess","title":"preprocess","text":"<pre><code>preprocess(df: DataFrame, nocommand: bool, stem: bool) -&gt; DataFrame\n</code></pre> <p>End-to-end data preprocessing on all posts and their corresponding  tags, then drop all data points with an empty preprocessed post afterward.</p> <p>Parameters:</p> <ul> <li> <code>df</code>             (<code>DataFrame</code>)         \u2013          <p>Raw data containing posts and their corresponding tags.</p> </li> <li> <code>nocommand</code>             (<code>bool</code>)         \u2013          <p>Whether to remove command words, i.e. <code>[\"prove\",  \"let\", \"find\", \"show\", \"given\"]</code>.</p> </li> <li> <code>stem</code>             (<code>bool</code>)         \u2013          <p>Whether to apply word stemming.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>DataFrame</code>         \u2013          <p>Preprocessed data used for modeling.</p> </li> </ul> Source code in <code>tagolym/data.py</code> <pre><code>def preprocess(df: DataFrame, nocommand: bool, stem: bool) -&gt; DataFrame:\n\"\"\"End-to-end data preprocessing on all posts and their corresponding \n    tags, then drop all data points with an empty preprocessed post afterward.\n\n    Args:\n        df (DataFrame): Raw data containing posts and their corresponding tags.\n        nocommand (bool): Whether to remove command words, i.e. `[\"prove\", \n            \"let\", \"find\", \"show\", \"given\"]`.\n        stem (bool): Whether to apply word stemming.\n\n    Returns:\n        Preprocessed data used for modeling.\n    \"\"\"\n    mapping = create_tag_mapping(df[\"tags\"])\n    df[\"token\"] = df[\"post_canonical\"].apply(preprocess_post, args=(nocommand, stem))\n    df[\"tags\"] = df[\"tags\"].apply(preprocess_tag, args=(mapping,))\n    df = df[df[\"token\"] != \"\"].reset_index(drop=True)\n    return df\n</code></pre>"},{"location":"reference/data/#data.binarize","title":"binarize","text":"<pre><code>binarize(labels: Series) -&gt; tuple[ndarray, Transformer]\n</code></pre> <p>Convert labels into a binary matrix of size <code>(n_samples, n_labels)</code>  indicating the presence of a complete label. For example, the labels  <code>[\"algebra\", \"inequality\"]</code> will be transformed into <code>[1, 0, 0, 0, 0, 1,  0, 0, 0, 0]</code>. Besides returning the transformed labels, it also returns  the <code>MultiLabelBinarizer</code> object used later in downstream processes for  converting the matrix back to labels.</p> <p>Parameters:</p> <ul> <li> <code>labels</code>             (<code>Series</code>)         \u2013          <p>Collection of list of preprocessed tags.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>label_indicator</code> (            <code>ndarray</code> )        \u2013          <p>Binary matrix representation of <code>labels</code>.</p> </li> <li> <code>mlb</code> (            <code>Transformer</code> )        \u2013          <p>Transformer that converts <code>labels</code> to <code>label_indicator</code>.</p> </li> </ul> Source code in <code>tagolym/data.py</code> <pre><code>def binarize(labels: Series) -&gt; tuple[ndarray, Transformer]:\n\"\"\"Convert labels into a binary matrix of size `(n_samples, n_labels)` \n    indicating the presence of a complete label. For example, the labels \n    `[\"algebra\", \"inequality\"]` will be transformed into `[1, 0, 0, 0, 0, 1, \n    0, 0, 0, 0]`. Besides returning the transformed labels, it also returns \n    the `MultiLabelBinarizer` object used later in downstream processes for \n    converting the matrix back to labels.\n\n    Args:\n        labels (Series): Collection of list of preprocessed tags.\n\n    Returns:\n        label_indicator: Binary matrix representation of `labels`.\n        mlb: Transformer that converts `labels` to `label_indicator`.\n    \"\"\"\n    mlb = MultiLabelBinarizer()\n    label_indicator = mlb.fit_transform(labels)\n    return label_indicator, mlb\n</code></pre>"},{"location":"reference/data/#data.split_data","title":"split_data","text":"<pre><code>split_data(X: DataFrame, y: ndarray, train_size: float = 0.7, random_state: Optional[RandomState] = None) -&gt; Iterable[Union[DataFrame, ndarray]]\n</code></pre> <p>Using utils.IterativeStratification, split the tokens and their  corresponding labels into 3 parts with (customizable) 70/15/15  proportions, each respectively for model training, validation, and testing.</p> <p>Parameters:</p> <ul> <li> <code>X</code>             (<code>DataFrame</code>)         \u2013          <p>Preprocessed posts.</p> </li> <li> <code>y</code>             (<code>ndarray</code>)         \u2013          <p>Binarized labels.</p> </li> <li> <code>train_size</code>             (<code>float</code>, default:                 <code>0.7</code> )         \u2013          <p>Fraction of training data. Defaults to  0.7.</p> </li> <li> <code>random_state</code>             (<code>Optional[RandomState]</code>, default:                 <code>None</code> )         \u2013          <p>Controls the shuffling  applied to the data before applying the split. Pass an int for  reproducible output across multiple function calls. Defaults to  None.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Iterable[Union[DataFrame, ndarray]]</code>         \u2013          <p>Tuple containing train-validation-test split of tokens and labels.</p> </li> </ul> Source code in <code>tagolym/data.py</code> <pre><code>def split_data(X: DataFrame, y: ndarray, train_size: float = 0.7, random_state: Optional[RandomState] = None) -&gt; Iterable[Union[DataFrame, ndarray]]:\n\"\"\"Using [utils.IterativeStratification][], split the tokens and their \n    corresponding labels into 3 parts with (customizable) 70/15/15 \n    proportions, each respectively for model training, validation, and testing.\n\n    Args:\n        X (DataFrame): Preprocessed posts.\n        y (ndarray): Binarized labels.\n        train_size (float, optional): Fraction of training data. Defaults to \n            0.7.\n        random_state (Optional[RandomState], optional): Controls the shuffling \n            applied to the data before applying the split. Pass an int for \n            reproducible output across multiple function calls. Defaults to \n            None.\n\n    Returns:\n        Tuple containing train-validation-test split of tokens and labels.\n    \"\"\"\n    stratifier = utils.IterativeStratification(\n        n_splits=3,\n        order=2,\n        sample_distribution_per_fold=[train_size, (1-train_size)/2, (1-train_size)/2],\n        random_state=random_state,\n    )\n\n    indices = []\n    for _, idx in stratifier.split(X, y):\n        indices.append(idx.tolist())\n\n    X_train, y_train = X.iloc[indices[0]], y[indices[0]]\n    X_val, y_val = X.iloc[indices[1]], y[indices[1]]\n    X_test, y_test = X.iloc[indices[2]], y[indices[2]]\n\n    return X_train, X_val, X_test, y_train, y_val, y_test\n</code></pre>"},{"location":"reference/evaluate/","title":"Evaluate","text":""},{"location":"reference/evaluate/#evaluate","title":"evaluate","text":"<p>Given true labels and model predictions, the purpose of this module is to  calculate the precision, recall, f1 score of the model, and number of samples.  The performance is computed on the overall samples, per-class samples, and  per-slice samples. There are 8 slices considered:</p> <ol> <li>short tokens, i.e. those that have less than 5 words,</li> <li>six slices in which the posts are tagged as a subtopic but not tagged as  the bigger topic covering the subtopic, and</li> <li>tokens that don't have frequent words with more than 3 letters.</li> </ol>"},{"location":"reference/evaluate/#evaluate.short_post","title":"short_post","text":"<pre><code>short_post(x: Series) -&gt; bool\n</code></pre> <p>Confirm whether a data point has a token with less than 5 words.</p> <p>Parameters:</p> <ul> <li> <code>x</code>             (<code>Series</code>)         \u2013          <p>Data point containing a token.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>Whether the data point has a token with less than 5 words.</p> </li> </ul> Source code in <code>tagolym/evaluate.py</code> <pre><code>@slicing_function()\ndef short_post(x: Series) -&gt; bool:\n\"\"\"Confirm whether a data point has a token with less than 5 words.\n\n    Args:\n        x (Series): Data point containing a token.\n\n    Returns:\n        Whether the data point has a token with less than 5 words.\n    \"\"\"\n    return len(x[\"token\"].split()) &lt; 5\n</code></pre>"},{"location":"reference/evaluate/#evaluate.inequality_not_algebra","title":"inequality_not_algebra","text":"<pre><code>inequality_not_algebra(x: Series) -&gt; bool\n</code></pre> <p>Confirm whether a data point has <code>\"inequality\"</code> but not <code>\"algebra\"</code> as  one of its labels.</p> <p>Parameters:</p> <ul> <li> <code>x</code>             (<code>Series</code>)         \u2013          <p>Data point containing a list of labels.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>Whether the data point has <code>\"inequality\"</code> but not <code>\"algebra\"</code> as one  of its labels.</p> </li> </ul> Source code in <code>tagolym/evaluate.py</code> <pre><code>@slicing_function()\ndef inequality_not_algebra(x: Series) -&gt; bool:\n\"\"\"Confirm whether a data point has `\"inequality\"` but not `\"algebra\"` as \n    one of its labels.\n\n    Args:\n        x (Series): Data point containing a list of labels.\n\n    Returns:\n        Whether the data point has `\"inequality\"` but not `\"algebra\"` as one \n            of its labels.\n    \"\"\"\n    inequality = \"inequality\" in x[\"tags\"]\n    algebra = \"algebra\" in x[\"tags\"]\n    return (inequality and not algebra)\n</code></pre>"},{"location":"reference/evaluate/#evaluate.function_not_algebra","title":"function_not_algebra","text":"<pre><code>function_not_algebra(x: Series) -&gt; bool\n</code></pre> <p>Confirm whether a data point has <code>\"function\"</code> but not <code>\"algebra\"</code> as  one of its labels.</p> <p>Parameters:</p> <ul> <li> <code>x</code>             (<code>Series</code>)         \u2013          <p>Data point containing a list of labels.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>Whether the data point has <code>\"function\"</code> but not <code>\"algebra\"</code> as one of  its labels.</p> </li> </ul> Source code in <code>tagolym/evaluate.py</code> <pre><code>@slicing_function()\ndef function_not_algebra(x: Series) -&gt; bool:\n\"\"\"Confirm whether a data point has `\"function\"` but not `\"algebra\"` as \n    one of its labels.\n\n    Args:\n        x (Series): Data point containing a list of labels.\n\n    Returns:\n        Whether the data point has `\"function\"` but not `\"algebra\"` as one of \n            its labels.\n    \"\"\"\n    function = \"function\" in x[\"tags\"]\n    algebra = \"algebra\" in x[\"tags\"]\n    return (function and not algebra)\n</code></pre>"},{"location":"reference/evaluate/#evaluate.polynomial_not_algebra","title":"polynomial_not_algebra","text":"<pre><code>polynomial_not_algebra(x: Series) -&gt; bool\n</code></pre> <p>Confirm whether a data point has <code>\"polynomial\"</code> but not <code>\"algebra\"</code> as  one of its labels.</p> <p>Parameters:</p> <ul> <li> <code>x</code>             (<code>Series</code>)         \u2013          <p>Data point containing a list of labels.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>Whether the data point has <code>\"polynomial\"</code> but not <code>\"algebra\"</code> as one  of its labels.</p> </li> </ul> Source code in <code>tagolym/evaluate.py</code> <pre><code>@slicing_function()\ndef polynomial_not_algebra(x: Series) -&gt; bool:\n\"\"\"Confirm whether a data point has `\"polynomial\"` but not `\"algebra\"` as \n    one of its labels.\n\n    Args:\n        x (Series): Data point containing a list of labels.\n\n    Returns:\n        Whether the data point has `\"polynomial\"` but not `\"algebra\"` as one \n            of its labels.\n    \"\"\"\n    polynomial = \"polynomial\" in x[\"tags\"]\n    algebra = \"algebra\" in x[\"tags\"]\n    return (polynomial and not algebra)\n</code></pre>"},{"location":"reference/evaluate/#evaluate.circle_not_geometry","title":"circle_not_geometry","text":"<pre><code>circle_not_geometry(x: Series) -&gt; bool\n</code></pre> <p>Confirm whether a data point has <code>\"circle\"</code> but not <code>\"geometry\"</code> as one  of its labels.</p> <p>Parameters:</p> <ul> <li> <code>x</code>             (<code>Series</code>)         \u2013          <p>Data point containing a list of labels.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>Whether the data point has <code>\"circle\"</code> but not <code>\"geometry\"</code> as one of  its labels.</p> </li> </ul> Source code in <code>tagolym/evaluate.py</code> <pre><code>@slicing_function()\ndef circle_not_geometry(x: Series) -&gt; bool:\n\"\"\"Confirm whether a data point has `\"circle\"` but not `\"geometry\"` as one \n    of its labels.\n\n    Args:\n        x (Series): Data point containing a list of labels.\n\n    Returns:\n        Whether the data point has `\"circle\"` but not `\"geometry\"` as one of \n            its labels.\n    \"\"\"\n    circle = \"circle\" in x[\"tags\"]\n    geometry = \"geometry\" in x[\"tags\"]\n    return (circle and not geometry)\n</code></pre>"},{"location":"reference/evaluate/#evaluate.trigonometry_not_geometry","title":"trigonometry_not_geometry","text":"<pre><code>trigonometry_not_geometry(x: Series) -&gt; bool\n</code></pre> <p>Confirm whether a data point has <code>\"trigonometry\"</code> but not <code>\"geometry\"</code>  as one of its labels.</p> <p>Parameters:</p> <ul> <li> <code>x</code>             (<code>Series</code>)         \u2013          <p>Data point containing a list of labels.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>Whether the data point has <code>\"trigonometry\"</code> but not <code>\"geometry\"</code> as  one of its labels.</p> </li> </ul> Source code in <code>tagolym/evaluate.py</code> <pre><code>@slicing_function()\ndef trigonometry_not_geometry(x: Series) -&gt; bool:\n\"\"\"Confirm whether a data point has `\"trigonometry\"` but not `\"geometry\"` \n    as one of its labels.\n\n    Args:\n        x (Series): Data point containing a list of labels.\n\n    Returns:\n        Whether the data point has `\"trigonometry\"` but not `\"geometry\"` as \n            one of its labels.\n    \"\"\"\n    trigonometry = \"trigonometry\" in x[\"tags\"]\n    geometry = \"geometry\" in x[\"tags\"]\n    return (trigonometry and not geometry)\n</code></pre>"},{"location":"reference/evaluate/#evaluate.modular_arithmetic_not_number_theory","title":"modular_arithmetic_not_number_theory","text":"<pre><code>modular_arithmetic_not_number_theory(x: Series) -&gt; bool\n</code></pre> <p>Confirm whether a data point has <code>\"modular arithmetic\"</code> but not  <code>\"number theory\"</code> as one of its labels.</p> <p>Parameters:</p> <ul> <li> <code>x</code>             (<code>Series</code>)         \u2013          <p>Data point containing a list of labels.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>Whether the data point has <code>\"modular arithmetic\"</code> but not <code>\"number  theory\"</code> as one of its labels.</p> </li> </ul> Source code in <code>tagolym/evaluate.py</code> <pre><code>@slicing_function()\ndef modular_arithmetic_not_number_theory(x: Series) -&gt; bool:\n\"\"\"Confirm whether a data point has `\"modular arithmetic\"` but not \n    `\"number theory\"` as one of its labels.\n\n    Args:\n        x (Series): Data point containing a list of labels.\n\n    Returns:\n        Whether the data point has `\"modular arithmetic\"` but not `\"number \n            theory\"` as one of its labels.\n    \"\"\"\n    modular_arithmetic = \"modular arithmetic\" in x[\"tags\"]\n    number_theory = \"number theory\" in x[\"tags\"]\n    return (modular_arithmetic and not number_theory)\n</code></pre>"},{"location":"reference/evaluate/#evaluate.keyword_lookup","title":"keyword_lookup","text":"<pre><code>keyword_lookup(x: Series, keywords: list) -&gt; bool\n</code></pre> <p>Confirm whether a token of a data point doesn't have frequent words  with more than 3 characters.</p> <p>Parameters:</p> <ul> <li> <code>x</code>             (<code>Series</code>)         \u2013          <p>Data point containing a token.</p> </li> <li> <code>keywords</code>             (<code>list</code>)         \u2013          <p>Frequent four-letter-or-more words derived from all  tokens.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>Whether the token of the data point doesn't have frequent words with  more than 3 letters.</p> </li> </ul> Source code in <code>tagolym/evaluate.py</code> <pre><code>def keyword_lookup(x: Series, keywords: list) -&gt; bool:\n\"\"\"Confirm whether a token of a data point doesn't have frequent words \n    with more than 3 characters.\n\n    Args:\n        x (Series): Data point containing a token.\n        keywords (list): Frequent four-letter-or-more words derived from all \n            tokens.\n\n    Returns:\n        Whether the token of the data point doesn't have frequent words with \n            more than 3 letters.\n    \"\"\"\n    return all(word not in x[\"token\"].split() for word in keywords)\n</code></pre>"},{"location":"reference/evaluate/#evaluate.make_keyword_sf","title":"make_keyword_sf","text":"<pre><code>make_keyword_sf(df: DataFrame) -&gt; SlicingFunction\n</code></pre> <p>Create a <code>SlicingFunction</code> object to use the keyword_lookup function.</p> <p>Parameters:</p> <ul> <li> <code>df</code>             (<code>DataFrame</code>)         \u2013          <p>Preprocessed data containing tokens and their  corresponding labels.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>SlicingFunction</code>         \u2013          <p>Python class for slicing functions, i.e. functions that take a data  point as input and produce a boolean that states whether or not  the data point satisfies some predefined conditions.</p> </li> </ul> Source code in <code>tagolym/evaluate.py</code> <pre><code>def make_keyword_sf(df: DataFrame) -&gt; SlicingFunction:\n\"\"\"Create a `SlicingFunction` object to use the [keyword_lookup]\n    [evaluate.keyword_lookup] function.\n\n    Args:\n        df (DataFrame): Preprocessed data containing tokens and their \n            corresponding labels.\n\n    Returns:\n        Python class for slicing functions, i.e. functions that take a data \n            point as input and produce a boolean that states whether or not \n            the data point satisfies some predefined conditions.\n    \"\"\"\n    frequent_words = df[\"token\"].str.split(expand=True).stack().value_counts().index[:20]\n    keywords = [word for word in frequent_words if len(word) &gt; 3]\n    return SlicingFunction(\n        name=\"without_frequent_words\",\n        f=keyword_lookup,\n        resources=dict(keywords=keywords),\n    )\n</code></pre>"},{"location":"reference/evaluate/#evaluate.average_performance","title":"average_performance","text":"<pre><code>average_performance(y_true: ndarray, y_pred: ndarray, average: Optional[Literal[micro, macro, weighted]] = 'weighted') -&gt; dict[str, Union[float, int]]\n</code></pre> <p>Compute precision, recall, F-measure, and number of samples from model  predictions and true labels.</p> <p>Parameters:</p> <ul> <li> <code>y_true</code>             (<code>ndarray</code>)         \u2013          <p>Ground truth (correct) target values.</p> </li> <li> <code>y_pred</code>             (<code>ndarray</code>)         \u2013          <p>Estimated targets as returned by the model.</p> </li> <li> <code>average</code>             (<code>Optional[Literal]</code>, default:                 <code>'weighted'</code> )         \u2013          <p>If <code>None</code>, the scores for each  class are returned. Otherwise, this determines the type of  averaging performed on the data:</p> Average Description <code>\"micro\"</code> Calculate metrics globally by counting the total                              true positives, false negatives and false                                     positives. <code>\"macro\"</code> Calculate metrics for each label, and find their                              unweighted mean. This does not take label                                     imbalance into account. <code>\"weighted\"</code> Calculate metrics for each label, and find their                              average weighted by support (the number of true                               instances for each label). This alters <code>\"macro\"</code>                              to account for label imbalance; it can result in                              an F-score that is not between precision and                                  recall. <p>Defaults to <code>\"weighted\"</code>.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Union[float, int]]</code>         \u2013          <p>Dictionary containing precision, recall, F-measure, and number of  samples.</p> </li> </ul> Source code in <code>tagolym/evaluate.py</code> <pre><code>def average_performance(y_true: ndarray, y_pred: ndarray, average: Optional[Literal[\"micro\", \"macro\", \"weighted\"]] = \"weighted\") -&gt; dict[str, Union[float, int]]:\n\"\"\"Compute precision, recall, F-measure, and number of samples from model \n    predictions and true labels.\n\n    Args:\n        y_true (ndarray): Ground truth (correct) target values.\n        y_pred (ndarray): Estimated targets as returned by the model.\n        average (Optional[Literal], optional): If `None`, the scores for each \n            class are returned. Otherwise, this determines the type of \n            averaging performed on the data:\n\n            | Average      | Description                                      |\n            | ------------ | ------------------------------------------------ |\n            | `\"micro\"`    | Calculate metrics globally by counting the total \\\n                             true positives, false negatives and false        \\\n                             positives.                                       |\n            | `\"macro\"`    | Calculate metrics for each label, and find their \\\n                             unweighted mean. This does not take label        \\\n                             imbalance into account.                          |\n            | `\"weighted\"` | Calculate metrics for each label, and find their \\\n                             average weighted by support (the number of true  \\\n                             instances for each label). This alters `\"macro\"` \\\n                             to account for label imbalance; it can result in \\\n                             an F-score that is not between precision and     \\\n                             recall.                                          |\n\n            Defaults to `\"weighted\"`.\n\n    Returns:\n        Dictionary containing precision, recall, F-measure, and number of \n            samples.\n    \"\"\"\n    metrics = precision_recall_fscore_support(y_true, y_pred, average=average)\n    return {\n        \"precision\": metrics[0],\n        \"recall\": metrics[1],\n        \"f1\": metrics[2],\n        \"num_samples\": len(y_true),\n    }\n</code></pre>"},{"location":"reference/evaluate/#evaluate.get_slice_metrics","title":"get_slice_metrics","text":"<pre><code>get_slice_metrics(y_true: ndarray, y_pred: ndarray, slices: ndarray) -&gt; dict[str, dict]\n</code></pre> <p>Apply average_performance with  <code>\"micro\"</code> average to different slices of data.</p> <p>Parameters:</p> <ul> <li> <code>y_true</code>             (<code>ndarray</code>)         \u2013          <p>Ground truth (correct) target values.</p> </li> <li> <code>y_pred</code>             (<code>ndarray</code>)         \u2013          <p>Estimated targets as returned by the model.</p> </li> <li> <code>slices</code>             (<code>ndarray</code>)         \u2013          <p>Slices of data defined by slicing functions.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, dict]</code>         \u2013          <p>Dictionary containing dictionaries of average performances across  slices.</p> </li> </ul> Source code in <code>tagolym/evaluate.py</code> <pre><code>def get_slice_metrics(y_true: ndarray, y_pred: ndarray, slices: ndarray) -&gt; dict[str, dict]:\n\"\"\"Apply [average_performance][evaluate.average_performance] with \n    `\"micro\"` average to different slices of data.\n\n    Args:\n        y_true (ndarray): Ground truth (correct) target values.\n        y_pred (ndarray): Estimated targets as returned by the model.\n        slices (ndarray): Slices of data defined by slicing functions.\n\n    Returns:\n        Dictionary containing dictionaries of average performances across \n            slices.\n    \"\"\"\n    slice_metrics = {}\n    for slice_name in slices.dtype.names:\n        mask = slices[slice_name].astype(bool)\n        if sum(mask):\n            slice_metrics[slice_name] = average_performance(y_true[mask], y_pred[mask], \"micro\")\n\n    return slice_metrics\n</code></pre>"},{"location":"reference/evaluate/#evaluate.get_metrics","title":"get_metrics","text":"<pre><code>get_metrics(y_true: ndarray, y_pred: ndarray, classes: ndarray, df: Optional[DataFrame] = None) -&gt; dict[str, dict]\n</code></pre> <p>Compute model performance for the overall data (using \"weighted\"  average), across classes, and across slices (using \"micro\" average).</p> <p>Parameters:</p> <ul> <li> <code>y_true</code>             (<code>ndarray</code>)         \u2013          <p>Ground truth (correct) target values.</p> </li> <li> <code>y_pred</code>             (<code>ndarray</code>)         \u2013          <p>Estimated targets as returned by the model.</p> </li> <li> <code>classes</code>             (<code>ndarray</code>)         \u2013          <p>Complete labels.</p> </li> <li> <code>df</code>             (<code>Optional[DataFrame]</code>, default:                 <code>None</code> )         \u2013          <p>Preprocessed data containing  tokens and their corresponding labels. Defaults to None.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, dict]</code>         \u2013          <p>Dictionary containing dictionaries of average performances for the  overall data, across classes, and across slices.</p> </li> </ul> Source code in <code>tagolym/evaluate.py</code> <pre><code>def get_metrics(y_true: ndarray, y_pred: ndarray, classes: ndarray, df: Optional[DataFrame] = None) -&gt; dict[str, dict]:\n\"\"\"Compute model performance for the overall data (using \"weighted\" \n    average), across classes, and across slices (using \"micro\" average).\n\n    Args:\n        y_true (ndarray): Ground truth (correct) target values.\n        y_pred (ndarray): Estimated targets as returned by the model.\n        classes (ndarray): Complete labels.\n        df (Optional[DataFrame], optional): Preprocessed data containing \n            tokens and their corresponding labels. Defaults to None.\n\n    Returns:\n        Dictionary containing dictionaries of average performances for the \n            overall data, across classes, and across slices.\n    \"\"\"\n    # performance\n    performance = {\"overall\": {}, \"class\": {}}\n\n    # overall performance\n    performance[\"overall\"] = average_performance(y_true, y_pred, \"weighted\")\n\n    # per-class performance\n    metrics = precision_recall_fscore_support(y_true, y_pred, average=None)\n    for i in range(len(classes)):\n        performance[\"class\"][classes[i]] = {\n            \"precision\": metrics[0][i],\n            \"recall\": metrics[1][i],\n            \"f1\": metrics[2][i],\n            \"num_samples\": metrics[3][i],\n        }\n\n    # per-slice performance\n    if df is not None:\n        slices = PandasSFApplier([\n            short_post,\n            inequality_not_algebra,\n            function_not_algebra,\n            polynomial_not_algebra,\n            circle_not_geometry,\n            trigonometry_not_geometry,\n            modular_arithmetic_not_number_theory,\n            make_keyword_sf(df),\n        ]).apply(df)\n        performance[\"slices\"] = get_slice_metrics(y_true, y_pred, slices)\n\n    return performance\n</code></pre>"},{"location":"reference/main/","title":"Main","text":""},{"location":"reference/main/#main","title":"main","text":"<p>The main module that runs everything end-to-end:</p> <ol> <li>Extract, load, and transform raw data</li> <li>Utilize preprocessed data to optimize the pipeline </li> <li>Train a model with the best arguments</li> <li>Predict on new data using the trained model</li> </ol>"},{"location":"reference/main/#main.elt_data","title":"elt_data","text":"<pre><code>elt_data(key_path: FilePath) -&gt; None\n</code></pre> <p>Query raw data from BigQuery and save it to <code>data</code> folder in JSON  format.</p> <p>Parameters:</p> <ul> <li> <code>key_path</code>             (<code>FilePath</code>)         \u2013          <p>Path to the Google service account private key  JSON file used for creating credentials.</p> </li> </ul> Source code in <code>tagolym/main.py</code> <pre><code>def elt_data(key_path: FilePath) -&gt; None:\n\"\"\"Query raw data from BigQuery and save it to `data` folder in JSON \n    format.\n\n    Args:\n        key_path (FilePath): Path to the Google service account private key \n            JSON file used for creating credentials.\n    \"\"\"    \n    # initialize bigquery client\n    credentials = service_account.Credentials.from_service_account_file(\n        key_path, scopes=[\"https://www.googleapis.com/auth/cloud-platform\"],\n    )\n    client = bigquery.Client(credentials=credentials, project=credentials.project_id,)\n\n    # write query prompt\n    query = \"\"\"\n    SELECT \n        post_canonical, \n        ANY_VALUE(ARRAY(\n            SELECT * FROM UNNEST(tags)\n        )) AS tags\n    FROM `tag-math-olympiad.contest_collections.*`\n    WHERE \n        category_name = \"High School Olympiads\"\n        AND ARRAY_LENGTH(tags) &gt; 0\n    GROUP BY 1\n    \"\"\"\n\n    # query to JSON format\n    query_job = client.query(query)\n    records = [dict(row) for row in query_job]\n\n    # save data to local\n    projects_fp = Path(config.DATA_DIR, \"labeled_data.json\")\n    with open(projects_fp, \"w\") as fp:\n        json.dump(records, fp)\n\n    logger.info(\"\u2705 Saved data!\")\n</code></pre>"},{"location":"reference/main/#main.train_model","title":"train_model","text":"<pre><code>train_model(args_fp: FilePath, experiment_name: str, run_name: str) -&gt; None\n</code></pre> <p>Load raw data from <code>data</code> folder and pass it to train.train to  preprocess the data and train a model with it. Log the metrics, artifacts,  and parameters using MLflow. Save also MLflow run ID and metrics to  <code>config</code> folder.</p> <p>Parameters:</p> <ul> <li> <code>args_fp</code>             (<code>FilePath</code>)         \u2013          <p>Path to the arguments used. Arguments include  booleans for preprocessing the posts (whether to exclude command  words and to implement word stemming), hyperparameters for the  modeling pipeline, and the best threshold for each class.</p> </li> <li> <code>experiment_name</code>             (<code>str</code>)         \u2013          <p>User input experiment name for MLflow.</p> </li> <li> <code>run_name</code>             (<code>str</code>)         \u2013          <p>User input run name for MLflow.</p> </li> </ul> Source code in <code>tagolym/main.py</code> <pre><code>def train_model(args_fp: FilePath, experiment_name: str, run_name: str) -&gt; None:\n\"\"\"Load raw data from `data` folder and pass it to [train.train][] to \n    preprocess the data and train a model with it. Log the metrics, artifacts, \n    and parameters using MLflow. Save also MLflow run ID and metrics to \n    `config` folder.\n\n    Args:\n        args_fp (FilePath): Path to the arguments used. Arguments include \n            booleans for preprocessing the posts (whether to exclude command \n            words and to implement word stemming), hyperparameters for the \n            modeling pipeline, and the best threshold for each class.\n        experiment_name (str): User input experiment name for MLflow.\n        run_name (str): User input run name for MLflow.\n    \"\"\"\n    # load labeled data\n    projects_fp = Path(config.DATA_DIR, \"labeled_data.json\")\n    df = pd.read_json(projects_fp)\n\n    # train\n    args = Namespace(**utils.load_dict(filepath=args_fp))\n    mlflow.set_experiment(experiment_name=experiment_name)\n\n    with mlflow.start_run(run_name=run_name):\n        run_id = mlflow.active_run().info.run_id\n        logger.info(f\"Run ID: {run_id}\")\n\n        # fit, predict, and evaluate\n        artifacts = train.train(args=args, df=df)\n\n        # log key metrics\n        for split in [\"train\", \"val\", \"test\"]:\n            metrics = artifacts[f\"{split}_metrics\"][\"overall\"]\n            for score in [\"precision\", \"recall\", \"f1\"]:\n                mlflow.log_metrics({f\"{split}_{score}\": metrics[f\"{score}\"]})\n\n        # log artifacts\n        with tempfile.TemporaryDirectory() as dp:\n            joblib.dump(artifacts[\"label_encoder\"], Path(dp, \"label_encoder.pkl\"))\n            joblib.dump(artifacts[\"model\"], Path(dp, \"model.pkl\"))\n            utils.save_dict(artifacts[\"train_metrics\"], Path(dp, \"train_metrics.json\"), cls=utils.NumpyEncoder)\n            utils.save_dict(artifacts[\"val_metrics\"], Path(dp, \"val_metrics.json\"), cls=utils.NumpyEncoder)\n            utils.save_dict(artifacts[\"test_metrics\"], Path(dp, \"test_metrics.json\"), cls=utils.NumpyEncoder)\n            utils.save_dict({**args.__dict__}, Path(dp, \"args.json\"), cls=utils.NumpyEncoder)\n            mlflow.log_artifacts(dp)\n\n        # log parameters\n        mlflow.log_params(vars(artifacts[\"args\"]))\n\n    # save to config\n    open(Path(config.CONFIG_DIR, \"run_id.txt\"), \"w\").write(run_id)\n    utils.save_dict(\n        artifacts[\"train_metrics\"],\n        Path(config.CONFIG_DIR, \"train_metrics.json\"),\n        cls=utils.NumpyEncoder,\n    )\n    utils.save_dict(\n        artifacts[\"val_metrics\"],\n        Path(config.CONFIG_DIR, \"val_metrics.json\"),\n        cls=utils.NumpyEncoder,\n    )\n    utils.save_dict(\n        artifacts[\"test_metrics\"],\n        Path(config.CONFIG_DIR, \"test_metrics.json\"),\n        cls=utils.NumpyEncoder,\n    )\n</code></pre>"},{"location":"reference/main/#main.optimize","title":"optimize","text":"<pre><code>optimize(args_fp: FilePath, study_name: str, num_trials: int) -&gt; None\n</code></pre> <p>Load raw data from <code>data</code> folder and optimize given arguments by  maximizing the f1 score in validation split. For search efficiency, the  optimization is done in two steps:</p> <ol> <li>for hyperparameters in preprocessing, vectorization, and modeling; and </li> <li>for hyperparameters in the learning algorithm.</li> </ol> <p>Save also the best arguments to <code>config</code> folder, name it as  <code>args_opt.json</code>.</p> <p>Parameters:</p> <ul> <li> <code>args_fp</code>             (<code>FilePath</code>)         \u2013          <p>Path to the initial arguments for the entire  process. Arguments include booleans for preprocessing the posts and  hyperparameters for the modeling pipeline.</p> </li> <li> <code>study_name</code>             (<code>str</code>)         \u2013          <p>User input study name for MLflow.</p> </li> <li> <code>num_trials</code>             (<code>int</code>)         \u2013          <p>Number of trials for arguments tuning, at minimum 1.</p> </li> </ul> Source code in <code>tagolym/main.py</code> <pre><code>def optimize(args_fp: FilePath, study_name: str, num_trials: int) -&gt; None:\n\"\"\"Load raw data from `data` folder and optimize given arguments by \n    maximizing the f1 score in validation split. For search efficiency, the \n    optimization is done in two steps:\n\n    1. for hyperparameters in preprocessing, vectorization, and modeling; and \n    2. for hyperparameters in the learning algorithm.\n\n    Save also the best arguments to `config` folder, name it as \n    `args_opt.json`.\n\n    Args:\n        args_fp (FilePath): Path to the initial arguments for the entire \n            process. Arguments include booleans for preprocessing the posts and \n            hyperparameters for the modeling pipeline.\n        study_name (str): User input study name for MLflow.\n        num_trials (int): Number of trials for arguments tuning, at minimum 1.\n    \"\"\"\n    # load labeled data\n    projects_fp = Path(config.DATA_DIR, \"labeled_data.json\")\n    df = pd.read_json(projects_fp)\n    args = Namespace(**utils.load_dict(filepath=args_fp))\n\n    # define mlflow callback\n    mlflow_callback = MLflowCallback(tracking_uri=mlflow.get_tracking_uri(), metric_name=\"f1\")\n\n    # optimize some args\n    study = optuna.create_study(\n        sampler=TPESampler(seed=config.SEED), study_name=study_name, direction=\"maximize\"\n    )\n    study.optimize(\n        lambda trial: train.objective(args, df, trial, experiment=0),\n        n_trials=num_trials,\n        callbacks=[mlflow_callback],\n    )\n\n    # update args\n    curr_best_value = study.best_value\n    args = {**args.__dict__, **study.best_params}\n    args = Namespace(**args)\n\n    # optimize other args\n    study = optuna.create_study(\n        sampler=TPESampler(seed=config.SEED), study_name=study_name, direction=\"maximize\"\n    )\n    study.optimize(\n        lambda trial: train.objective(args, df, trial, experiment=1),\n        n_trials=num_trials,\n        callbacks=[mlflow_callback],\n    )\n\n    # best trial\n    if study.best_value &gt; curr_best_value:\n        args = {**args.__dict__, **study.best_params}\n    else:\n        args = args.__dict__\n\n    # save to config\n    utils.save_dict(dict(args), Path(config.CONFIG_DIR, \"args_opt.json\"), cls=utils.NumpyEncoder)\n    logger.info(f\"Best value (f1): {study.best_value}\")\n    logger.info(f\"Best hyperparameters: {json.dumps(args, indent=2)}\")\n</code></pre>"},{"location":"reference/main/#main.load_artifacts","title":"load_artifacts","text":"<pre><code>load_artifacts(run_id: Optional[str] = None) -&gt; dict[str, Any]\n</code></pre> <p>Load the artifacts of a specific MLflow run ID into memory, including  arguments, metrics, model, and label binarizer.</p> <p>Parameters:</p> <ul> <li> <code>run_id</code>             (<code>Optional[str]</code>, default:                 <code>None</code> )         \u2013          <p>MLflow run ID. Defaults to None.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>         \u2013          <p>Final artifacts used for inference.</p> </li> </ul> Source code in <code>tagolym/main.py</code> <pre><code>def load_artifacts(run_id: Optional[str] = None) -&gt; dict[str, Any]:\n\"\"\"Load the artifacts of a specific MLflow run ID into memory, including \n    arguments, metrics, model, and label binarizer.\n\n    Args:\n        run_id (Optional[str], optional): MLflow run ID. Defaults to None.\n\n    Returns:\n        Final artifacts used for inference.\n    \"\"\"\n    # get run id\n    if not run_id:\n        run_id = open(Path(config.CONFIG_DIR, \"run_id.txt\")).read()\n\n    # locate specific artifacts directory\n    experiment_id = mlflow.get_run(run_id=run_id).info.experiment_id\n    artifacts_dir = Path(config.MODEL_REGISTRY, experiment_id, run_id, \"artifacts\")\n\n    # load objects from run\n    mlb = joblib.load(Path(artifacts_dir, \"label_encoder.pkl\"))\n    model = joblib.load(Path(artifacts_dir, \"model.pkl\"))\n    train_metrics = utils.load_dict(filepath=Path(artifacts_dir, \"train_metrics.json\"))\n    val_metrics = utils.load_dict(filepath=Path(artifacts_dir, \"val_metrics.json\"))\n    test_metrics = utils.load_dict(filepath=Path(artifacts_dir, \"test_metrics.json\"))\n    args = Namespace(**utils.load_dict(filepath=Path(artifacts_dir, \"args.json\")))\n\n    return {\n        \"args\": args,\n        \"label_encoder\": mlb,\n        \"model\": model,\n        \"train_metrics\": train_metrics,\n        \"val_metrics\": val_metrics,\n        \"test_metrics\": test_metrics,\n    }\n</code></pre>"},{"location":"reference/main/#main.predict_tag","title":"predict_tag","text":"<pre><code>predict_tag(texts: list[str], run_id: Optional[str] = None) -&gt; list[dict]\n</code></pre> <p>Given a specific MLflow run ID and some posts, predict their labels  using preloaded artifacts by calling predict.predict.</p> <p>Parameters:</p> <ul> <li> <code>texts</code>             (<code>list[str]</code>)         \u2013          <p>List of posts.</p> </li> <li> <code>run_id</code>             (<code>Optional[str]</code>, default:                 <code>None</code> )         \u2013          <p>MLflow run ID. If None, run ID will  be set from <code>run_id.txt</code> inside <code>config</code> folder. Defaults to None.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[dict]</code>         \u2013          <p>List of key-value pairs of post and its label prediction.</p> </li> </ul> Source code in <code>tagolym/main.py</code> <pre><code>def predict_tag(texts: list[str], run_id: Optional[str] = None) -&gt; list[dict]:\n\"\"\"Given a specific MLflow run ID and some posts, predict their labels \n    using preloaded artifacts by calling [predict.predict][].\n\n    Args:\n        texts (list[str]): List of posts.\n        run_id (Optional[str], optional): MLflow run ID. If None, run ID will \n            be set from `run_id.txt` inside `config` folder. Defaults to None.\n\n    Returns:\n        List of key-value pairs of post and its label prediction.\n    \"\"\"\n    # get run id\n    if not run_id:\n        run_id = open(Path(config.CONFIG_DIR, \"run_id.txt\")).read()\n\n    # load artifacts and predict\n    artifacts = load_artifacts(run_id=run_id)\n    prediction = predict.predict(texts=texts, artifacts=artifacts)\n    logger.info(json.dumps(prediction, indent=2))\n    return prediction\n</code></pre>"},{"location":"reference/predict/","title":"Predict","text":""},{"location":"reference/predict/#predict","title":"predict","text":"<p>Prediction module, called after model training.</p>"},{"location":"reference/predict/#predict.custom_predict","title":"custom_predict","text":"<pre><code>custom_predict(X: Series, model: Pipeline, args: Namespace, y_true: Optional[ndarray] = None) -&gt; tuple[ndarray, Namespace]\n</code></pre> <p>If the model has <code>predict_proba</code> attribute, predict the probability of  each label occurring. Furthermore, if the true labels are given, use them  to tune the threshold for each class using train.tune_threshold.  Otherwise, if the model has no <code>predict_proba</code> attribute, predict the  label directly (0 or 1) using 0.5 threshold.</p> <p>Parameters:</p> <ul> <li> <code>X</code>             (<code>Series</code>)         \u2013          <p>Preprocessed posts.</p> </li> <li> <code>model</code>             (<code>Pipeline</code>)         \u2013          <p>End-to-end pipeline including vectorizer and model.</p> </li> <li> <code>args</code>             (<code>Namespace</code>)         \u2013          <p>Arguments containing booleans for preprocessing the  posts and hyperparameters for the modeling pipeline. Can also  contain the best threshold tuned for each class.</p> </li> <li> <code>y_true</code>             (<code>Optional[ndarray]</code>, default:                 <code>None</code> )         \u2013          <p>Ground truth (correct) target  values. Defaults to None.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>y_pred</code> (            <code>ndarray</code> )        \u2013          <p>Estimated targets as returned by the model.</p> </li> <li> <code>args</code> (            <code>Namespace</code> )        \u2013          <p>Arguments, either is the same as input arguments or additionally  also contains the best threshold tuned for each class.</p> </li> </ul> Source code in <code>tagolym/predict.py</code> <pre><code>def custom_predict(X: Series, model: Pipeline, args: Namespace, y_true: Optional[ndarray] = None) -&gt; tuple[ndarray, Namespace]:\n\"\"\"If the model has `predict_proba` attribute, predict the probability of \n    each label occurring. Furthermore, if the true labels are given, use them \n    to tune the threshold for each class using [train.tune_threshold][]. \n    Otherwise, if the model has no `predict_proba` attribute, predict the \n    label directly (0 or 1) using 0.5 threshold.\n\n    Args:\n        X (Series): Preprocessed posts.\n        model (Pipeline): End-to-end pipeline including vectorizer and model.\n        args (Namespace): Arguments containing booleans for preprocessing the \n            posts and hyperparameters for the modeling pipeline. Can also \n            contain the best threshold tuned for each class.\n        y_true (Optional[ndarray], optional): Ground truth (correct) target \n            values. Defaults to None.\n\n    Returns:\n        y_pred: Estimated targets as returned by the model.\n        args: Arguments, either is the same as input arguments or additionally \n            also contains the best threshold tuned for each class.\n    \"\"\"\n    # prioritize predict_proba over predict\n    if hasattr(model, \"predict_proba\"):\n        y_score = model.predict_proba(X)\n        y_score = np.array(y_score)[:, :, 1].T\n\n        # tune threshold if label is given\n        if y_true is not None:\n            args.threshold = train.tune_threshold(y_true, y_score)\n\n        y_pred = y_score &gt; args.threshold\n    else:\n        y_pred = model.predict(X)\n    return y_pred, args\n</code></pre>"},{"location":"reference/predict/#predict.predict","title":"predict","text":"<pre><code>predict(texts: list[str], artifacts: dict[str, Any]) -&gt; list[dict]\n</code></pre> <p>Load arguments, label binarizer, and the trained model. Then,  preprocess given posts and predict their labels using  custom_predict. The label binarizer is used to  transform the prediction matrix back into readable labels.</p> <p>Parameters:</p> <ul> <li> <code>texts</code>             (<code>list[str]</code>)         \u2013          <p>User input list of posts.</p> </li> <li> <code>artifacts</code>             (<code>dict[str, Any]</code>)         \u2013          <p>Arguments, label binarizer, and the  trained model.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[dict]</code>         \u2013          <p>List of key-value pairs of post and its label prediction.</p> </li> </ul> Source code in <code>tagolym/predict.py</code> <pre><code>def predict(texts: list[str], artifacts: dict[str, Any]) -&gt; list[dict]:\n\"\"\"Load arguments, label binarizer, and the trained model. Then, \n    preprocess given posts and predict their labels using \n    [custom_predict][predict.custom_predict]. The label binarizer is used to \n    transform the prediction matrix back into readable labels.\n\n    Args:\n        texts (list[str]): User input list of posts.\n        artifacts (dict[str, Any]): Arguments, label binarizer, and the \n            trained model.\n\n    Returns:\n        List of key-value pairs of post and its label prediction.\n    \"\"\"\n    # load artifacts\n    args = artifacts[\"args\"]\n    mlb = artifacts[\"label_encoder\"]\n    model = artifacts[\"model\"]\n\n    # predict\n    x = pd.Series([data.preprocess_post(txt, args.nocommand, args.stem) for txt in texts])\n    y, args = custom_predict(x, model, args)\n    tags = mlb.inverse_transform(y)\n    predictions = [\n        {\n            \"input_text\": texts[i],\n            \"predicted_tags\": tags[i],\n        }\n        for i in range(len(texts))\n    ]\n    return predictions\n</code></pre>"},{"location":"reference/train/","title":"Train","text":""},{"location":"reference/train/#train","title":"train","text":"<p>Training and optimization module, called after extracting, loading, and  transforming raw data.</p>"},{"location":"reference/train/#train.train","title":"train","text":"<pre><code>train(args: Namespace, df: DataFrame) -&gt; dict[str, Any]\n</code></pre> <p>Preprocess the data, binarize the labels, and split the data using  functions from data module. Then, initialize a model, train it,  predict the labels on all three splits using the trained model, and  evaluate the predictions. This function accepts arguments, to which an  additional argument <code>threshold</code> may be added before being returned.  Basically, <code>threshold</code> is a list of the best threshold tuned for each  class.</p> <p>Parameters:</p> <ul> <li> <code>args</code>             (<code>Namespace</code>)         \u2013          <p>Arguments containing booleans for preprocessing the  posts and hyperparameters for the modeling pipeline.</p> </li> <li> <code>df</code>             (<code>DataFrame</code>)         \u2013          <p>Raw data containing posts and their corresponding tags.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>         \u2013          <p>Artifacts containing arguments, label binarizer, and the trained model.</p> </li> </ul> Source code in <code>tagolym/train.py</code> <pre><code>def train(args: Namespace, df: DataFrame) -&gt; dict[str, Any]:\n\"\"\"Preprocess the data, binarize the labels, and split the data using \n    functions from [data][] module. Then, initialize a model, train it, \n    predict the labels on all three splits using the trained model, and \n    evaluate the predictions. This function accepts arguments, to which an \n    additional argument `threshold` may be added before being returned. \n    Basically, `threshold` is a list of the best threshold tuned for each \n    class.\n\n    Args:\n        args (Namespace): Arguments containing booleans for preprocessing the \n            posts and hyperparameters for the modeling pipeline.\n        df (DataFrame): Raw data containing posts and their corresponding tags.\n\n    Returns:\n        Artifacts containing arguments, label binarizer, and the trained model.\n    \"\"\"\n    # setup\n    df = data.preprocess(df, args.nocommand, args.stem)\n    tags, mlb = data.binarize(df[\"tags\"])\n    classes = mlb.classes_\n    X_train, X_val, X_test, y_train, y_val, y_test = data.split_data(\n        df[[\"token\", \"tags\"]], tags, random_state=config.SEED\n    )\n\n    # model\n    model = Pipeline([\n        (\"tfidf\", TfidfVectorizer(ngram_range=(1, args.ngram_max))),\n        (\"multilabel\", MultiOutputClassifier(\n            SGDClassifier(\n                penalty=\"elasticnet\",\n                random_state=config.SEED,\n                early_stopping=True,\n                class_weight=\"balanced\",\n                loss=args.loss,\n                alpha=args.alpha,\n                l1_ratio=args.l1_ratio,\n                learning_rate=args.learning_rate,\n                eta0=args.eta0,\n                power_t=args.power_t,\n            ),\n            n_jobs=-1,\n        )),\n    ])\n\n    # fit, predict, and evaluate\n    model.fit(X_train[\"token\"], y_train)\n\n    y_pred, args = predict.custom_predict(X_val[\"token\"], model, args, y_true=y_val)\n    val_metrics = evaluate.get_metrics(y_val, y_pred, classes, df=X_val)\n\n    y_pred, args = predict.custom_predict(X_train[\"token\"], model, args)\n    train_metrics = evaluate.get_metrics(y_train, y_pred, classes, df=X_train)\n\n    y_pred, args = predict.custom_predict(X_test[\"token\"], model, args)\n    test_metrics = evaluate.get_metrics(y_test, y_pred, classes, df=X_test)\n\n    return {\n        \"args\": args,\n        \"label_encoder\": mlb,\n        \"model\": model,\n        \"train_metrics\": train_metrics,\n        \"val_metrics\": val_metrics,\n        \"test_metrics\": test_metrics,\n    }\n</code></pre>"},{"location":"reference/train/#train.objective","title":"objective","text":"<pre><code>objective(args: Namespace, df: DataFrame, trial: Trial, experiment: int = 0) -&gt; float\n</code></pre> <p>F1 score is a metric chosen to be optimized in hyperparameter tuning.  Using arguments chosen in an optuna trial, this function trains the model  using train and returns the f1 score of the validation  split. It also sets additional attributes to the trial, including  precision, recall, and the f1 score on all three splits.</p> <p>Parameters:</p> <ul> <li> <code>args</code>             (<code>Namespace</code>)         \u2013          <p>Arguments containing booleans for preprocessing the  posts and hyperparameters for the modeling pipeline.</p> </li> <li> <code>df</code>             (<code>DataFrame</code>)         \u2013          <p>Raw data containing posts and their corresponding tags.</p> </li> <li> <code>trial</code>             (<code>Trial</code>)         \u2013          <p>Process of evaluating an objective function. This  object is passed to an objective function and provides interfaces  to get parameter suggestion, manage the trial's state, and set/get  user-defined attributes of the trial.</p> </li> <li> <code>experiment</code>             (<code>int</code>, default:                 <code>0</code> )         \u2013          <p>Index for two-step optimization:  optimizing hyperparameters in preprocessing, vectorization, and  modeling; and hyperparameters in the learning algorithm. Defaults  to 0.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>           \u2013          <p>Experiment index is neither 0 nor 1.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>float</code>         \u2013          <p>F1 score of the validation split.</p> </li> </ul> Source code in <code>tagolym/train.py</code> <pre><code>def objective(args: Namespace, df: DataFrame, trial: Trial, experiment: int = 0) -&gt; float:\n\"\"\"F1 score is a metric chosen to be optimized in hyperparameter tuning. \n    Using arguments chosen in an optuna trial, this function trains the model \n    using [train][train.train] and returns the f1 score of the validation \n    split. It also sets additional attributes to the trial, including \n    precision, recall, and the f1 score on all three splits.\n\n    Args:\n        args (Namespace): Arguments containing booleans for preprocessing the \n            posts and hyperparameters for the modeling pipeline.\n        df (DataFrame): Raw data containing posts and their corresponding tags.\n        trial (Trial): Process of evaluating an objective function. This \n            object is passed to an objective function and provides interfaces \n            to get parameter suggestion, manage the trial's state, and set/get \n            user-defined attributes of the trial.\n        experiment (int, optional): Index for two-step optimization: \n            optimizing hyperparameters in preprocessing, vectorization, and \n            modeling; and hyperparameters in the learning algorithm. Defaults \n            to 0.\n\n    Raises:\n        ValueError: Experiment index is neither 0 nor 1.\n\n    Returns:\n        F1 score of the validation split.\n    \"\"\"\n    # parameters to tune\n    if experiment == 0:\n        args.nocommand = trial.suggest_categorical(\"nocommand\", [True, False])\n        args.stem = trial.suggest_categorical(\"stem\", [True, False])\n        args.ngram_max = trial.suggest_int(\"ngram_max\", 2, 4)\n        args.loss = trial.suggest_categorical(\"loss\", [\"hinge\", \"log_loss\", \"modified_huber\"])\n        args.l1_ratio = trial.suggest_float(\"l1_ratio\", 0.0, 1.0)\n        args.alpha = trial.suggest_float(\"alpha\", 1e-5, 1e-2, log=True)\n    elif experiment == 1:\n        args.learning_rate = trial.suggest_categorical(\n            \"learning_rate\", [\"constant\", \"optimal\", \"invscaling\", \"adaptive\"]\n        )\n        if args.learning_rate != \"optimal\":\n            args.eta0 = trial.suggest_float(\"eta0\", 1e-2, 1e-0, log=True)\n        if args.learning_rate == \"invscaling\":\n            args.power_t = trial.suggest_float(\"power_t\", 0.1, 0.5)\n    else:\n        raise ValueError(\"Experiment not recognized. Try 0 or 1.\")\n\n    # train\n    artifacts = train(args=args, df=df)\n\n    # set additional attributes\n    for split in [\"train\", \"val\", \"test\"]:\n        metrics = artifacts[f\"{split}_metrics\"][\"overall\"]\n        for score in [\"precision\", \"recall\", \"f1\"]:\n            trial.set_user_attr(f\"{split}_{score}\", metrics[f\"{score}\"])\n\n    return artifacts[\"val_metrics\"][\"overall\"][\"f1\"]\n</code></pre>"},{"location":"reference/train/#train.tune_threshold","title":"tune_threshold","text":"<pre><code>tune_threshold(y_true: ndarray, y_score: ndarray) -&gt; list\n</code></pre> <p>The default decision boundary for a binary classification problem is  0.5, which may not be optimal depending on the problem. So, besides tuning  arguments, the threshold for each class is also tuned by optimizing the f1  score. What it does is try all possible values of the threshold in a grid  from 0 to 1 and pick the one that has the maximum f1 score.</p> <p>Parameters:</p> <ul> <li> <code>y_true</code>             (<code>ndarray</code>)         \u2013          <p>Ground truth (correct) target values.</p> </li> <li> <code>y_score</code>             (<code>ndarray</code>)         \u2013          <p>Prediction probability of the model.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list</code>         \u2013          <p>List of the best threshold for each class.</p> </li> </ul> Source code in <code>tagolym/train.py</code> <pre><code>def tune_threshold(y_true: ndarray, y_score: ndarray) -&gt; list:\n\"\"\"The default decision boundary for a binary classification problem is \n    0.5, which may not be optimal depending on the problem. So, besides tuning \n    arguments, the threshold for each class is also tuned by optimizing the f1 \n    score. What it does is try all possible values of the threshold in a grid \n    from 0 to 1 and pick the one that has the maximum f1 score.\n\n    Args:\n        y_true (ndarray): Ground truth (correct) target values.\n        y_score (ndarray): Prediction probability of the model.\n\n    Returns:\n        List of the best threshold for each class.\n    \"\"\"\n    # initialize threshold grid\n    grid = np.linspace(0, 1, 101)\n    threshold = []\n\n    # find best threshold for each class\n    for yt, ys in zip(y_true.T, y_score.T):\n        f1 = {}\n        for th in grid:\n            yp = (ys &gt; th).astype(int)\n            f1[th] = f1_score(yt, yp)\n        best_th = max(f1, key=f1.__getitem__)\n        threshold.append(best_th)\n\n    return threshold\n</code></pre>"},{"location":"reference/utils/","title":"Utils","text":""},{"location":"reference/utils/#utils","title":"utils","text":"<p>Supporting functions and Python classes to streamline the pipeline,  includes:</p> <ol> <li>Loading and saving dictionaries</li> <li>Custom encoder to convert numpy objects to JSON serializable</li> <li>Stratified data splitting algorithm for multilabel classification</li> </ol>"},{"location":"reference/utils/#utils.NumpyEncoder","title":"NumpyEncoder","text":"<p>             Bases: <code>JSONEncoder</code></p> <p>Custom encoder for numpy data types.</p>"},{"location":"reference/utils/#utils.NumpyEncoder.default","title":"default","text":"<pre><code>default(obj: Any) -&gt; Any\n</code></pre> <p>Convert numpy objects to JSON serializable.</p> <p>Parameters:</p> <ul> <li> <code>obj</code>             (<code>Any</code>)         \u2013          <p>Numpy data type.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Any</code>         \u2013          <p>Corresponding JSON serializable data type.</p> </li> </ul> Source code in <code>tagolym/utils.py</code> <pre><code>def default(self, obj: Any) -&gt; Any:\n\"\"\"Convert numpy objects to JSON serializable.\n\n    Args:\n        obj (Any): Numpy data type.\n\n    Returns:\n        Corresponding JSON serializable data type.\n    \"\"\"\n    if isinstance(obj, (np.int_, np.intc, np.intp,\n                        np.int8, np.int16, np.int32, np.int64,\n                        np.uint8, np.uint16, np.uint32, np.uint64)):\n\n        return int(obj)\n    elif isinstance(obj, (np.float_, np.float16, np.float32, np.float64)):\n        return float(obj)\n    elif isinstance(obj, (np.complex_, np.complex64, np.complex128)):\n        return {\"real\": obj.real, \"imag\": obj.imag}\n    elif isinstance(obj, (np.ndarray,)):\n        return obj.tolist()\n    elif isinstance(obj, (np.bool_)):\n        return bool(obj)\n    elif isinstance(obj, (np.void)):\n        return None\n    return json.JSONEncoder.default(self, obj)\n</code></pre>"},{"location":"reference/utils/#utils.IterativeStratification","title":"IterativeStratification","text":"<pre><code>IterativeStratification(n_splits: int = 3, order: int = 1, sample_distribution_per_fold: Optional[list[float]] = None, shuffle: bool = False, random_state: Optional[RandomState] = None)\n</code></pre> <p>             Bases: <code>_BaseKFold</code></p> <p>Iteratively stratify a multilabel dataset into folds.</p> <p>combinations.</p> <p>Parameters:</p> <ul> <li> <code>n_splits</code>             (<code>int</code>, default:                 <code>3</code> )         \u2013          <p>The number of folds to stratify into.  Defaults to 3.</p> </li> <li> <code>order</code>             (<code>int</code>, default:                 <code>1</code> )         \u2013          <p>The order of label relationship to take  into account when balancing sample distribution across labels.  Defaults to 1.</p> </li> <li> <code>sample_distribution_per_fold</code>             (<code>Optional[list[float]]</code>, default:                 <code>None</code> )         \u2013          <p>Desired percentage of samples in each fold. If <code>None</code>, then  equal distribution of samples per fold is assumed i.e.  <code>1/n_splits</code> for each fold. The value is held in  <code>self.percentage_per_fold</code>. Defaults to None.</p> </li> <li> <code>shuffle</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Whether to shuffle the data before  splitting into batches. Note that the samples within each  split will not be shuffled. Defaults to False.</p> </li> <li> <code>random_state</code>             (<code>Optional[RandomState]</code>, default:                 <code>None</code> )         \u2013          <p>Integer to seed  the Random Number Generator (RNG), or the RNG state to use. If  <code>None</code>, then the global state of numpy RNG is used. Defaults  to <code>None</code>.</p> </li> </ul> Source code in <code>tagolym/utils.py</code> <pre><code>def __init__(\n    self,\n    n_splits: int = 3,\n    order: int = 1,\n    sample_distribution_per_fold: Optional[list[float]] = None,\n    shuffle: bool = False,\n    random_state: Optional[RandomState] = None,\n) -&gt; None:\n\"\"\"Construct an interative stratifier that splits data into folds and \n    maintain balanced representation with respect to order-th label \n    combinations.\n\n    Args:\n        n_splits (int, optional): The number of folds to stratify into. \n            Defaults to 3.\n        order (int, optional): The order of label relationship to take \n            into account when balancing sample distribution across labels. \n            Defaults to 1.\n        sample_distribution_per_fold (Optional[list[float]], optional): \n            Desired percentage of samples in each fold. If `None`, then \n            equal distribution of samples per fold is assumed i.e. \n            `1/n_splits` for each fold. The value is held in \n            `self.percentage_per_fold`. Defaults to None.\n        shuffle (bool, optional): Whether to shuffle the data before \n            splitting into batches. Note that the samples within each \n            split will not be shuffled. Defaults to False.\n        random_state (Optional[RandomState], optional): Integer to seed \n            the Random Number Generator (RNG), or the RNG state to use. If \n            `None`, then the global state of numpy RNG is used. Defaults \n            to `None`.\n    \"\"\"\n    self._rng_state = check_random_state(random_state)\n    need_shuffle = shuffle or random_state is not None\n    self.order = order\n    super(IterativeStratification, self).__init__(\n        n_splits,\n        shuffle=need_shuffle,\n        random_state=self._rng_state if need_shuffle else None,\n    )\n\n    if sample_distribution_per_fold:\n        self.percentage_per_fold = sample_distribution_per_fold\n    else:\n        self.percentage_per_fold = [\n            1 / float(self.n_splits) for _ in range(self.n_splits)\n        ]\n</code></pre>"},{"location":"reference/utils/#utils.IterativeStratification.prepare_stratification","title":"prepare_stratification","text":"<pre><code>prepare_stratification(y: ndarray) -&gt; tuple\n</code></pre> <p>Prepares variables for performing stratification.</p> <p>Parameters:</p> <ul> <li> <code>y</code>             (<code>ndarray</code>)         \u2013          <p>Binarized labels.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>tuple</code>         \u2013          <p>See documentation of distribute_positive_evidence.</p> </li> </ul> Source code in <code>tagolym/utils.py</code> <pre><code>def prepare_stratification(self, y: ndarray) -&gt; tuple:\n\"\"\"Prepares variables for performing stratification.\n\n    Args:\n        y (ndarray): Binarized labels.\n\n    Returns:\n        See documentation of [distribute_positive_evidence]\n            [utils.IterativeStratification.distribute_positive_evidence].\n    \"\"\"\n    self.n_samples, self.n_labels = y.shape\n    self.desired_samples_per_fold = np.array(\n        [self.percentage_per_fold[i] * self.n_samples for i in range(self.n_splits)]\n    )\n    rows = sp.lil_matrix(y).rows\n    rows_used = {i: False for i in range(self.n_samples)}\n    per_row_combinations = [[] for i in range(self.n_samples)]\n    samples_with_combination = {}\n    folds = [[] for _ in range(self.n_splits)]\n\n    for sample_index, label_assignment in enumerate(rows):\n        for combination in itertools.combinations_with_replacement(\n            label_assignment, self.order\n        ):\n            if combination not in samples_with_combination:\n                samples_with_combination[combination] = []\n\n            samples_with_combination[combination].append(sample_index)\n            per_row_combinations[sample_index].append(combination)\n\n    self.desired_samples_per_combination_per_fold = {\n        combination: np.array(\n            [\n                len(evidence_for_combination) * self.percentage_per_fold[j]\n                for j in range(self.n_splits)\n            ]\n        )\n        for combination, evidence_for_combination in samples_with_combination.items()\n    }\n    return (\n        rows_used,\n        per_row_combinations,\n        samples_with_combination,\n        folds,\n    )\n</code></pre>"},{"location":"reference/utils/#utils.IterativeStratification.distribute_positive_evidence","title":"distribute_positive_evidence","text":"<pre><code>distribute_positive_evidence(rows_used: dict[int, bool], folds: list[list], samples_with_combination: dict[tuple, list], per_row_combinations: list[list]) -&gt; None\n</code></pre> <p>Internal method to distribute evidence for labeled samples across  folds.</p> <p>Parameters:</p> <ul> <li> <code>rows_used</code>             (<code>dict[int, bool]</code>)         \u2013          <p>Mapping from a given sample index to  a boolean value indicating whether it has been already  assigned to a fold or not.</p> </li> <li> <code>folds</code>             (<code>list[list]</code>)         \u2013          <p>List of lists to be populated with samples.</p> </li> <li> <code>samples_with_combination</code>             (<code>dict[tuple, list]</code>)         \u2013          <p>Mapping from each  label combination present in binarized labels to list of  sample indices that have this combination assigned.</p> </li> <li> <code>per_row_combinations</code>             (<code>list[list]</code>)         \u2013          <p>List of all label combinations  of order <code>self.order</code> present in binarized labels per row.</p> </li> </ul> Source code in <code>tagolym/utils.py</code> <pre><code>def distribute_positive_evidence(self, rows_used: dict[int, bool], folds: list[list], samples_with_combination: dict[tuple, list], per_row_combinations: list[list]) -&gt; None:\n\"\"\"Internal method to distribute evidence for labeled samples across \n    folds.\n\n    Args:\n        rows_used (dict[int, bool]): Mapping from a given sample index to \n            a boolean value indicating whether it has been already \n            assigned to a fold or not.\n        folds (list[list]): List of lists to be populated with samples.\n        samples_with_combination (dict[tuple, list]): Mapping from each \n            label combination present in binarized labels to list of \n            sample indices that have this combination assigned.\n        per_row_combinations (list[list]): List of all label combinations \n            of order `self.order` present in binarized labels per row.\n    \"\"\"\n    l = get_most_desired_combination(samples_with_combination)\n    while l is not None:\n        while len(samples_with_combination[l]) &gt; 0:\n            row = samples_with_combination[l].pop()\n            if rows_used[row]:\n                continue\n\n            max_val = max(self.desired_samples_per_combination_per_fold[l])\n            M = np.where(\n                np.array(self.desired_samples_per_combination_per_fold[l])\n                == max_val\n            )[0]\n            m = fold_tie_break(\n                self.desired_samples_per_combination_per_fold[l], M, self._rng_state\n            )\n            folds[m].append(row)\n            rows_used[row] = True\n            for i in per_row_combinations[row]:\n                if row in samples_with_combination[i]:\n                    samples_with_combination[i].remove(row)\n                self.desired_samples_per_combination_per_fold[i][m] -= 1\n            self.desired_samples_per_fold[m] -= 1\n\n        l = get_most_desired_combination(samples_with_combination)\n</code></pre>"},{"location":"reference/utils/#utils.IterativeStratification.distribute_negative_evidence","title":"distribute_negative_evidence","text":"<pre><code>distribute_negative_evidence(rows_used: dict[int, bool], folds: list[list]) -&gt; None\n</code></pre> <p>Internal method to distribute evidence for unlabeled samples across  folds.</p> <p>Parameters:</p> <ul> <li> <code>rows_used</code>             (<code>dict[int, bool]</code>)         \u2013          <p>Mapping from a given sample index to  a boolean value indicating whether it has been already  assigned to a fold or not.</p> </li> <li> <code>folds</code>             (<code>list[list]</code>)         \u2013          <p>List of lists to be populated with samples.</p> </li> </ul> Source code in <code>tagolym/utils.py</code> <pre><code>def distribute_negative_evidence(self, rows_used: dict[int, bool], folds: list[list]) -&gt; None:\n\"\"\"Internal method to distribute evidence for unlabeled samples across \n    folds.\n\n    Args:\n        rows_used (dict[int, bool]): Mapping from a given sample index to \n            a boolean value indicating whether it has been already \n            assigned to a fold or not.\n        folds (list[list]): List of lists to be populated with samples.\n    \"\"\"\n    available_samples = [i for i, v in rows_used.items() if not v]\n    samples_left = len(available_samples)\n\n    while samples_left &gt; 0:\n        row = available_samples.pop()\n        rows_used[row] = True\n        samples_left -= 1\n        fold_selected = self._rng_state.choice(\n            np.where(self.desired_samples_per_fold &gt; 0)[0], 1\n        )[0]\n        self.desired_samples_per_fold[fold_selected] -= 1\n        folds[fold_selected].append(row)\n</code></pre>"},{"location":"reference/utils/#utils.load_dict","title":"load_dict","text":"<pre><code>load_dict(filepath: FilePath) -&gt; dict\n</code></pre> <p>Deserialize filepath of a JSON document to a Python object.</p> <p>Parameters:</p> <ul> <li> <code>filepath</code>             (<code>FilePath</code>)         \u2013          <p>Path of a JSON document to load from.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict</code>         \u2013          <p>Python dictionary.</p> </li> </ul> Source code in <code>tagolym/utils.py</code> <pre><code>def load_dict(filepath: FilePath) -&gt; dict:\n\"\"\"Deserialize filepath of a JSON document to a Python object.\n\n    Args:\n        filepath (FilePath): Path of a JSON document to load from.\n\n    Returns:\n        Python dictionary.\n    \"\"\"\n    with open(filepath) as fp:\n        return json.load(fp)\n</code></pre>"},{"location":"reference/utils/#utils.save_dict","title":"save_dict","text":"<pre><code>save_dict(d: dict, filepath: FilePath, cls: Optional[type[JSONEncoder]] = None) -&gt; None\n</code></pre> <p>Serialize a dictionary as a JSON formatted stream to a filepath.</p> <p>Parameters:</p> <ul> <li> <code>d</code>             (<code>dict</code>)         \u2013          <p>Python dictionary.</p> </li> <li> <code>filepath</code>             (<code>FilePath</code>)         \u2013          <p>Path of a JSON document to save into.</p> </li> <li> <code>cls</code>             (<code>Optional[type[JSONEncoder]]</code>, default:                 <code>None</code> )         \u2013          <p>Custom JSON encoder.  Defaults to None.</p> </li> </ul> Source code in <code>tagolym/utils.py</code> <pre><code>def save_dict(d: dict, filepath: FilePath, cls: Optional[type[JSONEncoder]] = None) -&gt; None:\n\"\"\"Serialize a dictionary as a JSON formatted stream to a filepath.\n\n    Args:\n        d (dict): Python dictionary.\n        filepath (FilePath): Path of a JSON document to save into.\n        cls (Optional[type[JSONEncoder]], optional): Custom JSON encoder. \n            Defaults to None.\n    \"\"\"\n    with open(filepath, \"w\") as fp:\n        json.dump(d, fp=fp, cls=cls, indent=4)\n</code></pre>"},{"location":"reference/utils/#utils.fold_tie_break","title":"fold_tie_break","text":"<pre><code>fold_tie_break(desired_samples_per_fold: ndarray, M: ndarray, random_state: Optional[RandomState] = check_random_state(None)) -&gt; int\n</code></pre> <p>Helper function to split a tie between folds with same desirability of  a given sample.</p> <p>Parameters:</p> <ul> <li> <code>desired_samples_per_fold</code>             (<code>ndarray</code>)         \u2013          <p>Number of samples desired per fold.</p> </li> <li> <code>M</code>             (<code>ndarray</code>)         \u2013          <p>List of folds between which to break the tie.</p> </li> <li> <code>random_state</code>             (<code>Optional[RandomState]</code>, default:                 <code>check_random_state(None)</code> )         \u2013          <p>The random state seed.  Defaults to check_random_state(None).</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code>         \u2013          <p>The selected fold index to put samples into.</p> </li> </ul> Source code in <code>tagolym/utils.py</code> <pre><code>def fold_tie_break(desired_samples_per_fold: ndarray, M: ndarray, random_state: Optional[RandomState] = check_random_state(None)) -&gt; int:\n\"\"\"Helper function to split a tie between folds with same desirability of \n    a given sample.\n\n    Args:\n        desired_samples_per_fold (ndarray): Number of samples desired per fold.\n        M (ndarray): List of folds between which to break the tie.\n        random_state (Optional[RandomState], optional): The random state seed. \n            Defaults to check_random_state(None).\n\n    Returns:\n        The selected fold index to put samples into.\n    \"\"\"\n    if len(M) == 1:\n        return M[0]\n    else:\n        max_val = max(desired_samples_per_fold[M])\n        M_prim = np.where(np.array(desired_samples_per_fold) == max_val)[0]\n        M_prim = np.array([x for x in M_prim if x in M])\n        if random_state:\n            if isinstance(random_state, np.random.RandomState):\n                return random_state.choice(M_prim, 1)[0]\n            else:\n                np.random.seed(random_state)\n        return np.random.choice(M_prim, 1)[0]\n</code></pre>"},{"location":"reference/utils/#utils.get_most_desired_combination","title":"get_most_desired_combination","text":"<pre><code>get_most_desired_combination(samples_with_combination: dict[tuple, list]) -&gt; Optional[tuple]\n</code></pre> <p>Select the next most desired combination whose evidence should be split  among folds.</p> <p>Parameters:</p> <ul> <li> <code>samples_with_combination</code>             (<code>dict[tuple, list]</code>)         \u2013          <p>Mapping from each label  combination present in binarized labels to list of sample indices  that have this combination assigned.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Optional[tuple]</code>         \u2013          <p>The combination to split next.</p> </li> </ul> Source code in <code>tagolym/utils.py</code> <pre><code>def get_most_desired_combination(samples_with_combination: dict[tuple, list]) -&gt; Optional[tuple]:\n\"\"\"Select the next most desired combination whose evidence should be split \n    among folds.\n\n    Args:\n        samples_with_combination (dict[tuple, list]): Mapping from each label \n            combination present in binarized labels to list of sample indices \n            that have this combination assigned.\n\n    Returns:\n        The combination to split next.\n    \"\"\"\n    currently_chosen = None\n    best_number_of_combinations, best_support_size = None, None\n\n    for combination, evidence in samples_with_combination.items():\n        number_of_combinations, support_size = (len(set(combination)), len(evidence))\n        if support_size == 0:\n            continue\n        if currently_chosen is None or (\n            best_number_of_combinations &lt; number_of_combinations\n            and best_support_size &gt; support_size\n        ):\n            currently_chosen = combination\n            best_number_of_combinations, best_support_size = (\n                number_of_combinations,\n                support_size,\n            )\n\n    return currently_chosen\n</code></pre>"}]}